{"version":3,"sources":["../../src/components/Histogram.js"],"names":["histogramStyle","display","Histogram","bucket","props","onChange","start","end","data","ticks","sorted","sort","buckets","tickIndex","s","i","max","values","push","length","innerHeight","height","padding","numberOfTicks","Array","keys","map","scale","range","v","invert","bucketWidth","selection","style","showOnDrag","position","left","right","backgroundColor","border","borderBottom","bottom","marginLeft","Object","assign","opacity","histogramPadding","barBorderRadius","selectionColor","selectBucket","bind","cursor","propTypes","arrayOf","number","isRequired","bucketSize","string","bool","func","defaultProps"],"mappings":"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","file":"Histogram.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { ascending } from 'd3-array'\n\nconst histogramStyle = {\n  display: 'block'\n}\n\nexport default class Histogram extends Component {\n\n  selectBucket (bucket) {\n    this.props.onChange([bucket.start, bucket.end])\n  }\n\n  bucket (data, start, end, ticks) {\n    const sorted = data.sort(ascending)\n    let buckets = []\n    let tickIndex = 0\n    let s = ticks[tickIndex]\n    let i = 0\n    let max = 0\n\n    while (s < (end)) {\n      let values = []\n\n      while (sorted[i] < (ticks[tickIndex + 1])) {\n        values.push(data[i])\n        i++\n      }\n\n      buckets.push({\n        start: s,\n        end: ticks[tickIndex + 1] || end,\n        values: values,\n      })\n      max = values.length > max ? values.length : max\n\n      tickIndex += 1\n      s = ticks[tickIndex]\n    }\n\n    return {\n      buckets,\n      max\n    }\n  }\n\n  render () {\n    const innerHeight = this.props.height - this.props.padding\n    const numberOfTicks = 20;\n    const ticks = [...Array(numberOfTicks).keys()]\n      .map(v => this.props.scale.range()[0] + v * (this.props.scale.range()[1] - this.props.scale.range()[0]) / numberOfTicks )\n      .map(this.props.scale.invert);\n\n    const { buckets, max } = this.bucket(\n      this.props.data,\n      this.props.start,\n      this.props.end,\n      ticks,\n    )\n    const bucketWidth = 100 / buckets.length\n    const selection = this.props.selection\n\n    let style = this.props.showOnDrag ? {\n      position: 'absolute',\n      left: '-1px',\n      right: '-1px',\n      backgroundColor: '#fafafa',\n      border: '1px solid #eaeaea',\n      borderBottom: 'none',\n      bottom: 'calc(100% - ' + this.props.padding + 'px)',\n    } : {\n      marginLeft: '5%',\n    };\n\n    return (\n      <div>\n        <svg style={Object.assign({}, style, histogramStyle)} width='90%' height={this.props.height}>\n          <g transform={'translate(0,' + this.props.height + ')'}>\n            <g transform='scale(1,-1)'>\n            {\n              buckets.map((bucket, i) => {\n                let opacity = 0\n\n                if (selection[0] > bucket.end || selection[1] < bucket.start) {\n                  opacity = 0\n                } else if (selection[0] <= bucket.start && selection[1] >= bucket.end) {\n                  // Entire block is covered\n                  opacity = 1\n                } else if (selection[0] > bucket.start && selection[1] > bucket.end) {\n                  opacity = 1 - (selection[0] - bucket.start) / (bucket.end - bucket.start)\n                  // Some of left block is covered\n                } else if (selection[1] < bucket.end && selection[0] < bucket.start) {\n                  // Some of right block is covered\n                  opacity = (selection[1] - bucket.start) / (bucket.end - bucket.start)\n                } else {\n                  // Parital match\n                  opacity = (selection[1] - selection[0]) / (bucket.end - bucket.start)\n                }\n\n                return (\n                  <svg key={i} x={this.props.scale(bucket.start) + '%'}>\n                  <g>\n                    <rect\n                      fill='#f1f1f1'\n                      width={this.props.scale(bucket.end) - this.props.scale(bucket.start) - this.props.histogramPadding + '%'}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                    <rect\n                      fill={this.props.selectionColor}\n                      onClick={this.selectBucket.bind(this, bucket)}\n                      style={{ opacity, cursor: 'pointer' }}\n                      width={this.props.scale(bucket.end) - this.props.scale(bucket.start) - this.props.histogramPadding + '%'}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                  </g>\n                  </svg>\n                )\n              })\n            }\n            </g>\n          </g>\n        </svg>\n      </div>\n    )\n  }\n}\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  start: PropTypes.number,\n  end: PropTypes.number,\n  bucketSize: PropTypes.number,\n  height: PropTypes.number,\n  padding: PropTypes.number,\n  selectionColor: PropTypes.string,\n  histogramPadding: PropTypes.number,\n  showOnDrag: PropTypes.bool,\n  onChange: PropTypes.func,\n  barBorderRadius: PropTypes.number\n}\n\nHistogram.defaultProps = {\n  barBorderRadius: 0,\n  histogramPadding: 1\n}\n"]}