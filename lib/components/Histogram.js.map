{"version":3,"sources":["../../src/components/Histogram.js"],"names":["histogramStyle","display","Histogram","bucket","props","onChange","start","end","data","ticks","sorted","sort","buckets","tickIndex","s","i","max","values","push","length","innerHeight","height","padding","numberOfTicks","Array","keys","map","scale","range","v","invert","bucketWidth","innerWidth","selection","style","showOnDrag","position","left","right","backgroundColor","border","borderBottom","bottom","Object","assign","width","opacity","histogramPadding","barBorderRadius","selectionColor","selectBucket","bind","reset","cursor","propTypes","arrayOf","number","isRequired","bucketSize","string","bool","func","defaultProps"],"mappings":"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","file":"Histogram.js","sourcesContent":["import React, { Component, PropTypes } from 'react'\nimport { ascending } from 'd3-array'\n\nconst histogramStyle = {\n  display: 'block'\n}\n\nexport default class Histogram extends Component {\n\n  selectBucket (bucket) {\n    this.props.onChange([bucket.start, bucket.end])\n  }\n\n  bucket (data, start, end, ticks) {\n    const sorted = data.sort(ascending)\n    let buckets = []\n    let tickIndex = 0\n    let s = ticks[tickIndex]\n    let i = 0\n    let max = 0\n\n    while (s < (end)) {\n      let values = []\n\n      while (sorted[i] < (ticks[tickIndex + 1])) {\n        values.push(data[i])\n        i++\n      }\n\n      buckets.push({\n        start: s,\n        end: ticks[tickIndex + 1] || end,\n        values: values,\n      })\n      max = values.length > max ? values.length : max\n\n      tickIndex += 1\n      s = ticks[tickIndex]\n    }\n\n    return {\n      buckets,\n      max\n    }\n  }\n\n  render () {\n    const innerHeight = this.props.height - this.props.padding\n    const numberOfTicks = 20;\n    const ticks = [...Array(numberOfTicks).keys()]\n      .map(v => this.props.scale.range()[0] + v * (this.props.scale.range()[1] - this.props.scale.range()[0]) / numberOfTicks )\n      .map(this.props.scale.invert);\n\n    const { buckets, max } = this.bucket(\n      this.props.data,\n      this.props.start,\n      this.props.end,\n      ticks,\n    )\n    const bucketWidth = this.props.innerWidth / buckets.length\n    const selection = this.props.selection\n\n    let style = this.props.showOnDrag ? {\n      position: 'absolute',\n      left: '-1px',\n      right: '-1px',\n      backgroundColor: '#fafafa',\n      border: '1px solid #eaeaea',\n      borderBottom: 'none',\n      bottom: 'calc(100% - ' + this.props.padding + 'px)'\n    } : {};\n\n    return (\n      <div>\n        <svg style={Object.assign({}, style, histogramStyle)} width={this.props.width} height={this.props.height}>\n          <g transform={'translate(0,' + this.props.height + ')'}>\n            <g transform='scale(1,-1)'>\n            {\n              buckets.map((bucket, i) => {\n                let opacity = 0\n\n                if (selection[0] > bucket.end || selection[1] < bucket.start) {\n                  opacity = 0\n                } else if (selection[0] <= bucket.start && selection[1] >= bucket.end) {\n                  // Entire block is covered\n                  opacity = 1\n                } else if (selection[0] > bucket.start && selection[1] > bucket.end) {\n                  opacity = 1 - (selection[0] - bucket.start) / (bucket.end - bucket.start)\n                  // Some of left block is covered\n                } else if (selection[1] < bucket.end && selection[0] < bucket.start) {\n                  // Some of right block is covered\n                  opacity = (selection[1] - bucket.start) / (bucket.end - bucket.start)\n                } else {\n                  // Parital match\n                  opacity = (selection[1] - selection[0]) / (bucket.end - bucket.start)\n                }\n\n                return (\n                  <g key={i} transform={'translate(' + this.props.scale(bucket.start) + ', 0)'}>\n                    <rect\n                      fill='#f1f1f1'\n                      width={this.props.scale(bucket.end) - this.props.scale(bucket.start) - this.props.histogramPadding}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                    <rect\n                      fill={this.props.selectionColor}\n                      onClick={this.selectBucket.bind(this, bucket)}\n                      onDoubleClick={this.props.reset.bind(this)}\n                      style={{ opacity, cursor: 'pointer' }}\n                      width={this.props.scale(bucket.end) - this.props.scale(bucket.start) - this.props.histogramPadding}\n                      height={(bucket.values.length / max) * innerHeight}\n                      rx={this.props.barBorderRadius}\n                      ry={this.props.barBorderRadius}\n                      x={this.props.histogramPadding / 2}\n                    />\n                  </g>\n                )\n              })\n            }\n            </g>\n          </g>\n        </svg>\n      </div>\n    )\n  }\n}\n\nHistogram.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.number).isRequired,\n  selection: PropTypes.arrayOf(PropTypes.number).isRequired,\n  start: PropTypes.number,\n  end: PropTypes.number,\n  bucketSize: PropTypes.number,\n  width: PropTypes.number,\n  innerWidth: PropTypes.number,\n  height: PropTypes.number,\n  padding: PropTypes.number,\n  selectionColor: PropTypes.string,\n  histogramPadding: PropTypes.number,\n  showOnDrag: PropTypes.bool,\n  reset: PropTypes.func,\n  onChange: PropTypes.func,\n  barBorderRadius: PropTypes.number\n}\n\nHistogram.defaultProps = {\n  barBorderRadius: 0,\n  histogramPadding: 1\n}\n"]}